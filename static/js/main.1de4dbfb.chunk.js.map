{"version":3,"sources":["components/VisSelector.js","components/App.js","index.js"],"names":["VisSelector","state","attr","onSelectChange","event","setState","target","value","props","onAttrChange","id","className","this","onChange","React","Component","mapboxgl","accessToken","App","colorCollection","map","setPaintProperty","lat","lng","zoom","Map","container","mapContainer","style","center","on","getCenter","toFixed","getZoom","addSource","statesJSON","pointsJSON","addLayer","popup","Popup","closeButton","closeOnClick","e","getCanvas","cursor","coords","features","geometry","coordinates","slice","properties","NAME_1","city","NAME_2","Math","abs","lngLat","setLngLat","setHTML","addTo","remove","ref","el","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1de4dbfb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass VisSelector extends React.Component {\r\n    state = {attr: ''}\r\n\r\n    onSelectChange = event => {\r\n        this.setState({attr: event.target.value}, () => {\r\n            this.props.onAttrChange(this.state.attr)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <select id=\"vis-dropdown\" className=\"ui dropdown button\" value={this.state.attr} onChange={this.onSelectChange}>\r\n                <option value=\"\">Attributes</option>\r\n                <option value=\"number\">number</option>\r\n                <option value=\"color\">color</option>\r\n                <option value=\"area\">area</option>\r\n            </select>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VisSelector\r\n","import './App.css'\r\nimport pointsJSON from '../data/points.json'\r\nimport statesJSON from '../data/states.json'\r\nimport React from 'react'\r\nimport mapboxgl from 'mapbox-gl'\r\nimport VisSelector from './VisSelector'\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiemhvdWRheGlhMjMzIiwiYSI6ImNrYndiY25kbjBlZXgyeG14dGRhMXlpZ20ifQ.FVNHr1fjVNC_RHlmE4TpHQ'\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            lat: 51.1657,\r\n            lng: 10.4515,\r\n            zoom: 5\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom\r\n        })\r\n\r\n        const map = this.map\r\n\r\n        map.on('load', () => {\r\n            map.on('move', () => {\r\n                this.setState({\r\n                    lat: map.getCenter().lat.toFixed(4),\r\n                    lng: map.getCenter().lng.toFixed(4),\r\n                    zoom: map.getZoom().toFixed(2)\r\n                })\r\n            })\r\n\r\n            map.addSource('states', {\r\n                'type': 'geojson',\r\n                'data': statesJSON\r\n            })\r\n\r\n            map.addSource('points', {\r\n                'type': 'geojson',\r\n                'data': pointsJSON\r\n            })\r\n\r\n            map.addLayer({\r\n                'id': 'state-layer',\r\n                'type': 'fill',\r\n                'source': 'states',\r\n                'paint': {\r\n                    'fill-color': '#000000',\r\n                    'fill-opacity': 0.5\r\n                }\r\n            })\r\n\r\n            map.addLayer({\r\n                'id': 'point-layer',\r\n                'type': 'circle',\r\n                'source': 'points',\r\n                'paint': {\r\n                    'circle-radius': 5,\r\n                    'circle-color': '#B42222'\r\n                }\r\n            })\r\n\r\n            // Create a popup, but don't add it to the map yet.\r\n            const popup = new mapboxgl.Popup({\r\n                closeButton: false,\r\n                closeOnClick: false\r\n            });\r\n\r\n            map.on('mouseenter', 'point-layer', e => {\r\n                // Change the cursor style as a UI indicator.\r\n                map.getCanvas().style.cursor = 'pointer'\r\n\r\n                const coords = e.features[0].geometry.coordinates.slice()\r\n                const {NAME_1: state, NAME_2: city} = e.features[0].properties\r\n\r\n                // Ensure that if the map is zoomed out such that multiple\r\n                // copies of the feature are visible, the popup appears\r\n                // over the copy being pointed to.\r\n                while (Math.abs(e.lngLat.lng - coords[0]) > 180) {\r\n                    coords[0] += e.lngLat.lng > coords[0] ? 360 : -360\r\n                }\r\n\r\n                // Populate the popup and set its coordinates\r\n                // based on the feature found.\r\n                popup\r\n                .setLngLat(coords)\r\n                .setHTML(`${state}:</br>${city}`)\r\n                .addTo(map);\r\n            })\r\n\r\n            map.on('mouseleave', 'point-layer', () => {\r\n                map.getCanvas().style.cursor = ''\r\n                popup.remove()\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    onAttrChange = attr => {\r\n        const colorCollection = [\r\n            'red', 'orange', 'yellow', 'green', 'cyan',\r\n            'blue', 'purple', 'pink', 'grey', 'brown'\r\n        ]\r\n\r\n        switch (attr) {\r\n            case 'color':\r\n                this.map.setPaintProperty('state-layer', 'fill-color', ['get', 'color'])\r\n                break\r\n            case 'number':\r\n                this.map.setPaintProperty('state-layer', 'fill-color', [\r\n                    'case',\r\n                    ['==', ['get', 'number'], 0], colorCollection[0],\r\n                    ['==', ['get', 'number'], 1], colorCollection[1],\r\n                    ['==', ['get', 'number'], 2], colorCollection[2],\r\n                    ['==', ['get', 'number'], 3], colorCollection[3],\r\n                    ['==', ['get', 'number'], 4], colorCollection[4],\r\n                    ['==', ['get', 'number'], 5], colorCollection[5],\r\n                    ['==', ['get', 'number'], 6], colorCollection[6],\r\n                    ['==', ['get', 'number'], 7], colorCollection[7],\r\n                    ['==', ['get', 'number'], 8], colorCollection[8],\r\n                    ['==', ['get', 'number'], 9], colorCollection[9],\r\n                    'black'\r\n                ])\r\n                break\r\n            case 'area':\r\n                // below code is buggy, please fix\r\n                this.map.setPaintProperty('state-layer', 'fill-color', [\r\n                    'case',\r\n                    ['==', ['%', ['get', 'area'], 10], 0], colorCollection[0],\r\n                    ['==', ['%', ['get', 'area'], 10], 1], colorCollection[1],\r\n                    ['==', ['%', ['get', 'area'], 10], 2], colorCollection[2],\r\n                    ['==', ['%', ['get', 'area'], 10], 3], colorCollection[3],\r\n                    ['==', ['%', ['get', 'area'], 10], 4], colorCollection[4],\r\n                    ['==', ['%', ['get', 'area'], 10], 5], colorCollection[5],\r\n                    ['==', ['%', ['get', 'area'], 10], 6], colorCollection[6],\r\n                    ['==', ['%', ['get', 'area'], 10], 7], colorCollection[7],\r\n                    ['==', ['%', ['get', 'area'], 10], 8], colorCollection[8],\r\n                    ['==', ['%', ['get', 'area'], 10], 9], colorCollection[9],\r\n                    'white'\r\n                ])\r\n                break\r\n            default:\r\n                this.map.setPaintProperty('state-layer', 'fill-color', '#000000')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"geo-app\">\r\n                <div className=\"side-bar\">{this.state.lat}N, {this.state.lng}E</div>\r\n                <div className=\"vis-selector\"><VisSelector onAttrChange={this.onAttrChange} /></div>\r\n                <div ref={el => this.mapContainer = el} className=\"map-container\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './components/App'\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}